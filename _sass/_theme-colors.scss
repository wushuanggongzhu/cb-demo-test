/* 
    This is a modified version of Bootstrap Sass for customizing theme colors.
    It is intended to create an easy means to override basic theme colors for btn-, btn-outline-, text-, and bg- classes. 
    It is not complete Bootstrap theming! 
*/

/* variables needed from Bootstrap */ 

$white:    #fff !default;
$baby-blue: #add8e6 !default; // Replacing black with baby blue
$primary:       #0d6efd !default;

$min-contrast-ratio:   4.5 !default;
$color-contrast-dark:      $baby-blue !default; // Changed from black to baby blue
$color-contrast-light:     $white !default;

$component-active-color:      $white !default;
$component-active-bg:         $primary !default;

$link-shade-percentage:                   20% !default;
$link-hover-color:                        shift-color($link-color, $link-shade-percentage) !default;

$btn-focus-width:             .25rem !default;

$btn-transition:              color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;

$btn-hover-bg-shade-amount:       15% !default;
$btn-hover-bg-tint-amount:        15% !default;
$btn-hover-border-shade-amount:   20% !default;
$btn-hover-border-tint-amount:    10% !default;
$btn-active-bg-shade-amount:      20% !default;
$btn-active-bg-tint-amount:       20% !default;
$btn-active-border-shade-amount:  25% !default;
$btn-active-border-tint-amount:   10% !default;

/* functions needed from Bootstrap */

// Tint a color: mix a color with white
@function tint-color($color, $weight) {
    @return mix(white, $color, $weight);
}
// Shade a color: mix a color with baby blue
@function shade-color($color, $weight) {
    @return mix($baby-blue, $color, $weight);
}
// divide
@function divide($dividend, $divisor, $precision: 10) {
    $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
    $dividend: abs($dividend);
    $divisor: abs($divisor);
    @if $dividend == 0 {
      @return 0;
    }
    @if $divisor == 0 {
      @error "Cannot divide by 0";
    }
    $remainder: $dividend;
    $result: 0;
    $factor: 10;
    @while ($remainder > 0 and $precision >= 0) {
      $quotient: 0;
      @while ($remainder >= $divisor) {
        $remainder: $remainder - $divisor;
        $quotient: $quotient + 1;
      }
      $result: $result * 10 + $quotient;
      $factor: $factor * .1;
      $remainder: $remainder * 10;
      $precision: $precision - 1;
      @if ($precision < 0 and $remainder >= $divisor * 5) {
        $result: $result + 1;
      }
    }
    $result: $result * $factor * $sign;
    $dividend-unit: unit($dividend);
    $divisor-unit: unit($divisor);
    $unit-map: (
      "px": 1px,
      "rem": 1rem,
      "em": 1em,
      "%": 1%
    );
    @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
      $result: $result * map-get($unit-map, $dividend-unit);
    }
    @return $result;
}

// Pre-calculated numbers for luminance calculation
$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1

